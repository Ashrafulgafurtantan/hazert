/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WaterLevelRouteImport } from './routes/water-level'
import { Route as TemporaryRouteImport } from './routes/temporary'
import { Route as IndexRouteImport } from './routes/index'

const WaterLevelRoute = WaterLevelRouteImport.update({
  id: '/water-level',
  path: '/water-level',
  getParentRoute: () => rootRouteImport,
} as any)
const TemporaryRoute = TemporaryRouteImport.update({
  id: '/temporary',
  path: '/temporary',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/temporary': typeof TemporaryRoute
  '/water-level': typeof WaterLevelRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/temporary': typeof TemporaryRoute
  '/water-level': typeof WaterLevelRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/temporary': typeof TemporaryRoute
  '/water-level': typeof WaterLevelRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/temporary' | '/water-level'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/temporary' | '/water-level'
  id: '__root__' | '/' | '/temporary' | '/water-level'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TemporaryRoute: typeof TemporaryRoute
  WaterLevelRoute: typeof WaterLevelRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/water-level': {
      id: '/water-level'
      path: '/water-level'
      fullPath: '/water-level'
      preLoaderRoute: typeof WaterLevelRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/temporary': {
      id: '/temporary'
      path: '/temporary'
      fullPath: '/temporary'
      preLoaderRoute: typeof TemporaryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TemporaryRoute: TemporaryRoute,
  WaterLevelRoute: WaterLevelRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
